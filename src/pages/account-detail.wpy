<template>
    <view class="page" wx:if="{{account}}" @tap="bindPageTap">
        <view class="page-body">
            <view>
                <view class="space"></view>

                <view class="account">
                    <view class="account-icon">
                        <view class="icon">
                            <image wx:if="{{iconUrl}}" src="{{iconUrl + account.icon}}" @tap="bindSelectIcon"/>
                        </view>
                    </view>
                    <view class="account-title">
                        <view class="title">
                            <input wx:if="{{isEditing}}" value="{{account.title}}" @input="bindTitleInput"/>
                            <text wx:else>{{account.title}}</text>
                        </view>
                    </view>
                </view>

                <view class="space"></view>

                <view class="property-list">
                    <repeat for="{{account.propertys}}" key="index" index="index" item="item">
                        <view wx:if="{{toIndex == index && startIndex >= index}}" class="property-item"/>
                        <view class="property-item {{startIndex == index ? 'mainmove':'mainend'}}"
                              style="{{startIndex === index ? ('top:'+ dragTop +'px') : ''}}"
                        >
                            <view class="item-wrap"
                                  animation="{{removeIndex == index?itemWrapOutAni:itemWrapInAni}}">
                                <view class="item-content">
                                    <view class="item-remove" catchtap="bindRemoveProperty({{index}})"
                                          animation="{{isEditing?itemRemoveInAni:itemRemoveOutAni}}">
                                        <icon class="iconfont icon-remove"></icon>
                                    </view>
                                    <view class="item-name">
                                        <text>{{item.name}}</text>
                                    </view>
                                    <view class="item-value">
                                        <input wx:if="{{isEditing}}" value="{{item.value}}"
                                               bindinput="bindValueInput({{index}})"/>
                                        <text wx:else bindlongtap="bindItemValueLongTap({{item}})">{{item.value}}</text>
                                    </view>
                                    <view class="item-drag" animation="{{isEditing?itemDragInAni:itemDragOutAni}}"
                                          catchtouchstart="bindMoveStart({{index}})"
                                          catchtouchmove="bindMove({{index}})"
                                          catchtouchend="bindMoveEnd({{index}})"
                                    >
                                        <icon class="iconfont icon-tuodong"></icon>
                                    </view>
                                </view>
                                <view class="item-delete" catchtap="bindDelProperty({{index}})">
                                    删除
                                </view>
                            </view>
                        </view>
                        <view wx:if="{{toIndex == index && startIndex < index}}" class="property-item"/>
                    </repeat>
                </view>

                <view class="space"></view>

                <view wx:if="{{isEditing}}" class="weui-cells weui-cells_after-title">
                    <view class="weui-cell weui-cell_link" bindtap="bindAddProperty">
                        <view class="weui-cell__bd">添加属性</view>
                    </view>
                </view>
            </view>
        </view>
        <view class="page-footer">
            <block wx:if="{{!isEditing}}">
                <view class="footer-left">
                </view>
                <view class="footer-right">
                    <view class="button" bindtap="bindEditStart()">编辑</view>
                </view>
            </block>
            <block wx:else>
                <view class="footer-left">
                    <view class="button" bindtap="bindEditCancel()">取消</view>
                </view>
                <view class="footer-right">
                    <view class="button" bindtap="bindEditDone()">完成</view>
                </view>
            </block>
        </view>

    </view>
</template>

<script>
    import wepy from 'wepy';
    import accountApi from '../apis/accountApi';
    import env from '../lib/env';
    import utils from '../lib/utils';
    import TextItem from '../components/text-item';
    import NumberItem from '../components/number-item';
    import PasswordItem from '../components/password-item';

    let y, y1, y2;

    // 列表元素高度
    let itemHeight = utils.rem2px(90);

    export default class AccountDetail extends wepy.page {

        config = {
            navigationBarTitleText: '账号详情'
        };

        components = {
            'text-item': TextItem,
            'number-item': NumberItem,
            'password-item': PasswordItem
        };

        data = {
            account: null,              // 账号信息
            delPropIds: [],             // 删除的属性ID

            isEditing: false,           // 编辑状态
            hasChanged: false,          // 有改变

            startIndex: -1,             // 原始位置
            toIndex: -1,                // 目标位置
            dragTop: -1,                // 拖动top
            removeIndex: -1,            // 移除索引
            deleteIndex: -1,            // 删除索引

            // 动画
            itemDragInAni: '',
            itemDragOutAni: '',
            itemCountInAni: '',
            itemCountOutAni: '',
            itemWrapOutAni: '',
            itemWrapInAni: '',
            deleteAnimation: '',
            itemRemoveInAni: '',
            itemRemoveOutAni: '',
        };

        computed = {
            scrollViewHeight() {
                return utils.px2rem(wx.getSystemInfoSync().windowHeight) - 90;
            },
            iconUrl() {
                return env.iconUrl;
            }
        };

        methods = {
            bindEditStart() {
                this.isEditing = true;
                // 复制一份
                this.accountCopy = {...this.account};
                this.accountCopy.propertys = [...this.account.propertys];
            },
            bindEditDone() {
                // if (this.hasChanged) {
                let account = this.account;
                let delPropIds = this.delPropIds;

                if (account.title === '') {
                    utils.showToast('请输入账号名称');
                    return;
                }

                if (account.propertys.length === 0) {
                    utils.showToast('至少要添加一个属性');
                    return;
                }

                utils.showLoading();
                accountApi.save({account, delPropIds})
                    .then(res => {
                        utils.hideLoading();
                        if (utils.isSuccess(res)) {
                            utils.showToast('保存成功', 'success');
                            this.isEditing = false;
                            this.removeIndex = -1;
                            this.hasChanged = false;
                            this.$apply();
                        } else {
                            utils.showToast('保存失败');
                        }
                    })
                    .catch(err => {
                        utils.hideLoading();
                        utils.showToast(err.message);
                    });
                // } else {
                //     this.isEditing = false;
                //     this.removeIndex = -1;
                //     this.hasChanged = false;
                // }

            },
            bindEditCancel() {
                this.account = this.accountCopy;
                this.isEditing = false;
                this.removeIndex = -1;
                this.hasChanged = false;
            },
            bindSelectIcon() {
                if (this.isEditing) {
                    wx.navigateTo({
                        url: 'select-icon'
                    });
                }
            },
            bindTitleInput(e) {
                this.account.title = e.detail.value;
                this.hasChanged = true;
            },
            bindValueInput(index, e) {
                this.account.propertys[index].value = e.detail.value;
                this.hasChanged = true;
            },
            bindAddProperty() {
                utils.navigateTo('add-property');
            },
            bindMoveStart(index, e) {
                if (!this.isEditing) return;

                y = e.touches[0].clientY;
                y1 = e.currentTarget.offsetTop;
                y2 = e.touches[0].clientY - y + y1 + (index * itemHeight);

                console.log(y, y1, y2);

                console.log(e);

                this.startIndex = index;
                this.toIndex = index;
                this.dragTop = y2;

            },
            bindMove: function (index, e) {
                if (!this.isEditing) return;

                y2 = e.touches[0].clientY - y + y1 + (index * itemHeight);

                console.log(e, e.touches[0].clientY, y, y1, y2);

                let propertys = this.account.propertys;
                var toIndex = 0;
                for (var i = 1; i < propertys.length; i++) {
                    if (y2 > (itemHeight * (i - 1) + itemHeight / 2)) {
                        toIndex = i;
                    }
                }

                this.dragTop = y2;
                this.toIndex = toIndex;
            },
            bindMoveEnd: function (index, e) {
                if (!this.isEditing) return;

                let propertys = this.account.propertys;
                var item = propertys[this.startIndex];
                propertys.splice(this.startIndex, 1);
                propertys.splice(this.toIndex, 0, item);

                this.startIndex = -1;
                this.toIndex = -1;
                this.dragTop = -1;
                this.hasChanged = true;
            },
            bindRemoveProperty(index) {
                this.removeIndex = index;

                // 创建动画
                var removeAnimation = wx.createAnimation({
                    duration: 400,
                    timingFunction: 'ease',
                    delay: 0,
                    transformOrigin: '%50 %50 0',
                });

                let px = utils.rem2px(120);

                // 设置动画
                removeAnimation.translate('-' + px + 'px', 0).step();        // 偏移x,y,z

                // 导出动画数据传递给组件的animation属性。
                this.removeAnimation = removeAnimation.export();

                // 创建动画
                var removeAnimation2 = wx.createAnimation({
                    duration: 400,
                    timingFunction: 'ease',
                    delay: 0,
                    transformOrigin: '%50 %50 0',
                });

                // 设置动画
                removeAnimation2.translate(0, 0).step();        // 偏移x,y,z

                // 导出动画数据传递给组件的animation属性。
                this.removeAnimation2 = removeAnimation2.export();
            },
            bindDelProperty(index) {
                let propertys = this.account.propertys;
                let item = propertys[index];

                this.removeIndex = -1;
                this.itemWrapInAni = this.itemWrapInAni2;

                propertys.splice(index, 1);
                if (item.id) {
                    this.delPropIds.push(item);
                }
                this.hasChanged = true;
            },
            bindPageTap() {
                if (this.removeIndex !== -1) {
                    this.removeIndex = -1;
                }
            },
            bindItemValueLongTap(item) {
                wx.setClipboardData({
                    data: item.value,
                    success: (res) => {
                        utils.showToast('复制成功');
                    }
                });
            }
        };

        onAddProperty(property) {
            property.account_id = this.account.id;
            this.account.propertys.push(property);
            this.$apply();
        }

        onSelectIconSuccess(icon) {
            this.account.icon = icon;
            this.hasChanged = true;
        }

        onLoad(options) {
            const {categoryId, id} = options;

            if (id) {
                utils.showLoading();
                accountApi.detail({id}).then(res => {
                    utils.hideLoading();
                    this.account = res.data;
                    this.$apply();
                }).catch(err => {
                    utils.hideLoading();
                    utils.showToast(err.message);
                });
            } else if (categoryId) {
                this.account = {
                    category_id: categoryId,
                    title: '新建账号',
                    icon: 'app/360.png',
                    propertys: [
                        {
                            'name': '账号',
                            'type': 1,
                            'value': 'xxxx'
                        },
                        {
                            'name': '密码',
                            'type': 1,
                            'value': '123456'
                        }
                    ]
                };
                this.isEditing = true;
                this.hasChanged = true;
            }

        }

        onReady() {
            // 创建动画
            let itemRemoveInAni = wx.createAnimation({timingFunction: 'ease'});
            itemRemoveInAni.width('60rpx').step();
            this.itemRemoveInAni = itemRemoveInAni.export();

            let itemRemoveOutAni = wx.createAnimation({timingFunction: 'ease'});
            itemRemoveOutAni.width('0rpx').step();
            this.itemRemoveOutAni = itemRemoveOutAni.export();

            // 创建动画
            let itemDragInAni = wx.createAnimation({timingFunction: 'ease'});
            itemDragInAni.width('60rpx').step();
            this.itemDragInAni = itemDragInAni.export();

            let itemDragOutAni = wx.createAnimation({timingFunction: 'ease'});
            itemDragOutAni.width('0rpx').step();
            this.itemDragOutAni = itemDragOutAni.export();

            // 创建动画
            let itemWrapInAni = wx.createAnimation({timingFunction: 'ease'});
            itemWrapInAni.translate(0, 0).step();
            this.itemWrapInAni = itemWrapInAni.export();

            let itemWrapOutAni = wx.createAnimation({timingFunction: 'ease'});
            let px = utils.rem2px(150);
            itemWrapOutAni.translate('-' + px + 'px', 0).step();
            this.itemWrapOutAni = itemWrapOutAni.export();

            let itemWrapInAni1 = wx.createAnimation({timingFunction: 'ease'});
            itemWrapInAni1.translate(0, 0).step();
            this.itemWrapInAni1 = itemWrapInAni1.export();

            let itemWrapInAni2 = wx.createAnimation({duration: 0, timingFunction: 'ease'});
            itemWrapInAni2.translate(0, 0).step();
            this.itemWrapInAni2 = itemWrapInAni2.export();
        }

    }
</script>

<style type="less">
    @import '../style/weui.less';

    .space {
        height: ~'20rpx';
    }

    .account {
        background-color: #FFFFFF;
        display: flex;
        flex: 1;
        padding: ~'20rpx' 0 ~'20rpx' ~'20rpx';

        .account-icon {
            display: flex;
            flex-direction: column;
            justify-content: center;
            padding: 0 ~'15rpx';

            .icon {
                width: ~'90rpx';
                height: ~'90rpx';
                background-color: @weuiBgColorDefault;
                border-radius: 50%;
                display: flex;
                justify-content: center;
                align-items: center;

                image {
                    width: 100%;
                    height: 100%;
                }
            }

        }

        .account-title {
            display: flex;
            flex-direction: column;
            justify-content: center;
            flex-grow: 1;

            .title {
                display: flex;
                align-items: center;
                font-size: ~'30rpx';
                height: ~'45rpx';
                color: @weuiTextColorTitle;
                font-weight: bold;
                padding: ~'5rpx';

                input {
                    width: 100%;
                }

            }
        }
    }

    .property-list {
        position: relative;
    }

    .property-item {
        @width: ~'750rpx';
        @height: ~'90rpx';
        @leftGap: ~'30rpx';
        position: relative;
        width: @width;
        height: @height;
        background-color: #FFFFFF;

        &:before {
            .setBottomLine(@weuiLineColorLight);
            left: @leftGap;
        }

        .item-wrap {
            display: flex;
            position: absolute;
            top: 0;
            left: 0;
            height: @height;
        }

        .item-content {
            display: flex;
            width: @width;
            box-sizing: border-box;
            flex-shrink: 0;
        }

        .item-remove {
            display: flex;
            justify-content: flex-end;
            align-items: center;
            color: @weuiColorWarn;
            flex-shrink: 0;
            width: ~'0rpx';

        }

        .item-name {
            display: flex;
            justify-content: flex-start;
            align-items: center;
            width: ~'200rpx';
            padding-left: ~'30rpx';

            text {
                font-size: @weuiFontSize;
                color: @weuiTextColorTitle;
            }

        }

        .item-value {
            display: flex;
            justify-content: flex-start;
            align-items: center;
            flex-grow: 1;

            text {
                font-size: @weuiFontSize;
                color: @weuiTextColorGray;
            }
        }

        .item-drag {
            display: flex;
            justify-content: flex-start;
            align-items: center;
            flex-shrink: 0;
            width: ~'0rpx';

            icon {
                color: @weuiTextColorGray;
            }
        }

        .item-delete {
            background-color: @weuiColorWarn;
            color: @weuiTextColorWhite;
            display: flex;
            justify-content: center;
            align-items: center;
            width: ~'150rpx';
            flex-shrink: 0;
        }

    }

    .mainmove {
        position: absolute;
        z-index: 10;
        opacity: 0.6;
        box-shadow: 0px 0px 20px #333333;

    }

    .mainend {
        opacity: 1;
    }

</style>
