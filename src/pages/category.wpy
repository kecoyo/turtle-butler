<template>
  <view class="page">
    <view class="page-body">
      <scroll-view class="scroll-view" style="{{'height:' + scrollViewHeight+'rpx'}}" scroll-y bindscroll="bindScroll">
        <repeat for="{{categorys}}" key="index" index="index" item="item">
          <view wx:if="{{toIndex == index && startIndex >= index}}" class="category-item" />
          <view class="category-item {{startIndex == index ? 'mainmove':'mainend'}}" bindtap="bindItemTap({{item}})"
                style="{{startIndex == index ? ('top:'+ dragTop +'px') : ''}}">
            <view class="item-wrap" animation="{{removeIndex == index?itemWrapOutAni:itemWrapInAni}}">
              <view class="item-content">
                <view class="item-remove" catchtap="bindRemoveCategory({{index}})" animation="{{isEditing?itemRemoveInAni:itemRemoveOutAni}}">
                  <icon class="iconfont icon-remove"></icon>
                </view>
                <view class="item-icon">
                  <view class="icon">
                    <image wx:if="{{item.icon}}" src="{{imgUrl + item.icon}}" />
                    <image wx:else src="../images/default-category.png" />
                  </view>
                </view>
                <view class="item-title">
                  <text>{{item.name}}</text>
                </view>
                <view class="item-count">
                  <text class="count">{{item.count}}</text>
                </view>
                <view class="item-right">
                  <icon class="iconfont icon-right"></icon>
                </view>
                <view class="item-drag" animation="{{isEditing?itemDragInAni:itemDragOutAni}}" catchtouchstart="bindMoveStart({{index}})"
                      catchtouchmove="bindMove({{index}})" catchtouchend="bindMoveEnd({{index}})">
                  <icon class="iconfont icon-drag"></icon>
                </view>
              </view>
              <view class="item-delete" catchtap="bindDelCategory({{index}})">
                删除
              </view>
            </view>
          </view>
          <view wx:if="{{toIndex == index && startIndex < index}}" class="category-item" />
        </repeat>
      </scroll-view>
    </view>
    <view class="page-footer">
      <block wx:if="{{!isEditing}}">
        <view class="footer-left">
          <view class="button" bindtap="bindAddCategory">新建分组</view>
        </view>
        <view class="footer-right">
          <view class="button" bindtap="bindEditStart()">编辑</view>
        </view>
      </block>
      <block wx:else>
        <view class="footer-left">
          <view class="button" bindtap="bindEditCancel()">取消</view>
        </view>
        <view class="footer-right">
          <view class="button" bindtap="bindEditDone()">完成</view>
        </view>
      </block>
    </view>
  </view>
</template>

<script>
import wepy from 'wepy';
import categoryApi from '../apis/categoryApi';
import utils from '../lib/utils';

// 拖动y
let y, y1, y2;
// 列表元素高度
let itemHeight = utils.rem2px(120);

export default class Category extends wepy.page {
  config = {
    navigationBarTitleText: '分组列表'
  };

  data = {
    categorys: [],
    imgUrl: '',

    isEditing: false, // 编辑状态
    hasChanged: false, // 有改变

    startIndex: -1, // 原始位置
    toIndex: -1, // 目标位置
    dragTop: -1, // 拖动元素的top

    removeIndex: -1, // 移除元素的索引
    deleteIndex: -1, // 删除元素的索引

    // 动画
    itemDragInAni: '',
    itemDragOutAni: '',
    itemCountInAni: '',
    itemCountOutAni: '',

    itemWrapOutAni: '',
    itemWrapInAni: '',

    deleteAnimation: '',

    itemRemoveInAni: '',
    itemRemoveOutAni: ''
  };

  computed = {
    scrollViewHeight() {
      return utils.px2rem(wx.getSystemInfoSync().windowHeight) - 90;
    }
  };

  methods = {
    bindEditStart() {
      this.isEditing = true;
      this.categorys_ = this.categorys.slice(0);
    },
    bindEditDone() {
      if (this.hasChanged) {
        let categorys = this.categorys.map(item => ({ id: item.id }));

        utils.showLoading();
        categoryApi.saveAll({ categorys }).then(result => {
          utils.hideLoading();
          if (result.errno) {
            utils.showToast('保存失败，' + result.errmsg);
            this.$apply();
            return;
          }

          utils.showToast('保存成功', 'success');
          this.isEditing = false;
          this.hasChanged = false;
          this.$apply();
        });
      } else {
        this.isEditing = false;
        this.removeIndex = -1;
        this.hasChanged = false;
      }
    },
    bindEditCancel() {
      this.categorys = this.categorys_;
      this.isEditing = false;
      this.removeIndex = -1;
      this.hasChanged = false;
    },
    bindItemTap(item) {
      if (this.removeIndex !== -1) {
        this.removeIndex = -1;
        return;
      }
      if (this.isEditing) {
        utils.navigateTo(`category-edit?id=${item.id}`);
      } else {
        utils.navigateTo(`account?categoryId=${item.id}&categoryName=${item.name}`);
      }
    },
    bindMoveStart(index, e) {
      if (!this.isEditing) return;

      y = e.touches[0].clientY;
      y1 = e.currentTarget.offsetTop;
      y2 = e.touches[0].clientY - y + y1 + index * itemHeight;

      console.log(y, y1, y2);

      console.log(e);

      this.startIndex = index;
      this.toIndex = index;
      this.dragTop = y2;
    },
    bindMove: function(index, e) {
      if (!this.isEditing) return;

      y2 = e.touches[0].clientY - y + y1 + index * itemHeight;

      console.log(e, e.touches[0].clientY, y, y1, y2);

      var toIndex = 0;
      for (var i = 1; i < this.categorys.length; i++) {
        if (y2 > itemHeight * (i - 1) + itemHeight / 2) {
          toIndex = i;
        }
      }

      this.dragTop = y2;
      this.toIndex = toIndex;
    },
    bindMoveEnd: function(index, e) {
      if (!this.isEditing) return;

      var item = this.categorys[this.startIndex];
      this.categorys.splice(this.startIndex, 1);
      this.categorys.splice(this.toIndex, 0, item);

      this.startIndex = -1;
      this.toIndex = -1;
      this.dragTop = -1;
      this.hasChanged = true;
    },
    bindAddCategory() {
      utils.navigateTo('category-edit');
    },
    bindRemoveCategory(index) {
      this.removeIndex = index;
      this.itemWrapInAni = this.itemWrapInAni1;
    },
    bindDelCategory(index) {
      let item = this.categorys[index];
      // 非空验证
      if (item.count > 0) {
        utils.showToast('分组内有数据，不能删除');
        return;
      }
      this.removeIndex = -1;
      this.itemWrapInAni = this.itemWrapInAni2;

      this.categorys.splice(index, 1);
      this.hasChanged = true;
    },
    bindScroll(e) {}
  };

  onAddCategory(item) {
    item.count = 0;
    this.categorys.push(item);
    this.$apply();
  }

  onDataChanged() {
    this.onLoad();
  }

  dataChanged() {
    this.onLoad();
  }

  fetchCategorys() {
    utils.showLoading();
    categoryApi
      .list()
      .then(res => {
        utils.hideLoading();
        this.categorys = res.data;
        this.imgUrl = res.imgUrl;
        this.$apply();
      })
      .catch(err => {
        utils.hideLoading();
        utils.showToast(err.message);
      });
  }

  onLoad() {}

  onShow() {
    this.fetchCategorys();
  }

  onReady() {
    // 创建动画
    let itemRemoveInAni = wx.createAnimation({ timingFunction: 'ease' });
    itemRemoveInAni.width('60rpx').step();
    this.itemRemoveInAni = itemRemoveInAni.export();

    let itemRemoveOutAni = wx.createAnimation({ timingFunction: 'ease' });
    itemRemoveOutAni.width('0rpx').step();
    this.itemRemoveOutAni = itemRemoveOutAni.export();

    // 创建动画
    let itemDragInAni = wx.createAnimation({ timingFunction: 'ease' });
    itemDragInAni.width('60rpx').step();
    this.itemDragInAni = itemDragInAni.export();

    let itemDragOutAni = wx.createAnimation({ timingFunction: 'ease' });
    itemDragOutAni.width('0rpx').step();
    this.itemDragOutAni = itemDragOutAni.export();

    // 创建动画
    let itemWrapInAni = wx.createAnimation({ timingFunction: 'ease' });
    itemWrapInAni.translate(0, 0).step();
    this.itemWrapInAni = itemWrapInAni.export();

    let itemWrapOutAni = wx.createAnimation({ timingFunction: 'ease' });
    let px = utils.rem2px(150);
    itemWrapOutAni.translate('-' + px + 'px', 0).step();
    this.itemWrapOutAni = itemWrapOutAni.export();

    let itemWrapInAni1 = wx.createAnimation({ timingFunction: 'ease' });
    itemWrapInAni1.translate(0, 0).step();
    this.itemWrapInAni1 = itemWrapInAni1.export();

    let itemWrapInAni2 = wx.createAnimation({ duration: 0, timingFunction: 'ease' });
    itemWrapInAni2.translate(0, 0).step();
    this.itemWrapInAni2 = itemWrapInAni2.export();
  }
}
</script>

<style type="less">
@import '../style/weui.less';

.scroll-view {
  position: relative;
}

.category-item {
  @leftGap: ~'30rpx';
  position: relative;
  height: ~'120rpx';
  width: ~'750rpx';

  &:before {
    .setBottomLine(@weuiLineColorLight);
    left: @leftGap;
  }

  .item-wrap {
    display: flex;
    position: absolute;
    top: 0;
    left: 0;
    height: ~'120rpx';
  }

  .item-content {
    display: flex;
    width: ~'750rpx';
    box-sizing: border-box;
    flex-shrink: 0;
  }

  .item-remove {
    display: flex;
    justify-content: flex-end;
    align-items: center;
    color: @weuiColorWarn;
    flex-shrink: 0;
    width: ~'0rpx';
  }

  .item-delete {
    background-color: @weuiColorWarn;
    color: @weuiTextColorWhite;
    display: flex;
    justify-content: center;
    align-items: center;
    width: ~'150rpx';
    flex-basis: ~'150rpx';
    flex-shrink: 0;
  }

  .item-icon {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-left: @leftGap;

    .icon {
      width: ~'90rpx';
      height: ~'90rpx';
      background-color: @weuiBgColorDefault;
      border-radius: 50%;
      display: flex;
      justify-content: center;
      align-items: center;

      image {
        width: 100%;
        height: 100%;
      }
    }
  }

  .item-title {
    display: flex;
    justify-content: space-between;
    flex-grow: 1;
    padding-left: ~'30rpx';
    padding-right: ~'40rpx';
    box-sizing: border-box;

    text {
      display: flex;
      align-items: center;
      padding-right: ~'20rpx';
      font-size: @weuiFontSize;
      color: @weuiTextColorTitle;
      box-sizing: border-box;
      margin-top: -1px;
    }

    input {
      width: 100%;
      height: 100%;
      font-size: @weuiFontSize;
      border: 0;
      padding: 0;
      margin: 0;
      box-sizing: border-box;
    }
  }

  .item-count {
    display: flex;
    justify-content: flex-start;
    align-items: center;
    flex-shrink: 0;
    width: ~'60rpx';
    overflow: hidden;

    .count {
      display: flex;
      justify-content: center;
      align-items: center;
      font-size: @weuiFontSize;
      color: @weuiTextColorWarn;
      width: ~'30rpx';
    }
  }

  .item-right {
    display: flex;
    flex-direction: column;
    justify-content: center;
    padding-right: ~'25rpx';

    icon {
      color: @weuiTextColorGray;
    }
  }

  .item-drag {
    display: flex;
    align-items: center;
    flex-shrink: 0;
    width: ~'0rpx';
    overflow: hidden;

    icon {
      font-size: @weuiFontSizeXL;
    }
  }

  .item-delete {
    background-color: @weuiColorWarn;
    color: @weuiTextColorWhite;
    width: ~'120rpx';
    display: flex;
    justify-content: center;
    align-items: center;
    flex-shrink: 0;
  }
}

.mainmove {
  position: absolute;
  z-index: 10;
  opacity: 0.6;
  box-shadow: 0px 0px 20px #333333;
}

.mainend {
  opacity: 1;
}
</style>
