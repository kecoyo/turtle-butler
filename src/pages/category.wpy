<template>
    <view class="page">
        <view class="page-body">
            <repeat for="{{list}}" key="index" index="index" item="item">

                <div wx:if="{{toIndex == index && startIndex >= index}}" class="category-item"/>
                <view class="category-item {{startIndex == index ? 'mainmove':'mainend'}}" bindtap="itemTap({{item}})"
                      style="{{'left:0; top:'+ dragTop +'px'}}">
                    <view class="item-icon">
                        <view class="icon" bindtap="selectIcon({{index}})">
                            <image src="{{iconUrl + item.icon}}"></image>
                        </view>
                    </view>
                    <view class="item-title">
                        <input wx:if="{{isEditing}}" value="{{item.name}}" bindinput="nameInput({{index}})"/>
                        <text wx:else>{{item.name}}</text>
                    </view>
                    <view class="item-count" animation="{{isEditing?itemCountOutAni:itemCountInAni}}">
                        <text class="count">{{item.count}}</text>
                    </view>
                    <view class="item-drag" animation="{{isEditing?itemDragInAni:itemDragOutAni}}"
                          catchtouchstart="moveStart({{index}})" catchtouchmove="move" catchtouchend="moveEnd">
                        <icon class="iconfont icon-tuodong"></icon>
                    </view>
                </view>
                <div wx:if="{{toIndex == index && startIndex < index}}" class="category-item"/>

            </repeat>
        </view>

        <view class="page-footer">
            <view class="page-footer-inner">
                <block wx:if="{{!isEditing}}">
                    <view class="footer-left">
                        <view class="button" bindtap="startEdit()">新建分组</view>
                    </view>
                    <view class="footer-right">
                        <view class="button" bindtap="startEdit()">编辑</view>
                    </view>
                </block>
                <block wx:else>
                    <view class="footer-left">
                        <view class="button" bindtap="cancelEdit()">取消</view>
                    </view>
                    <view class="footer-right">
                        <view class="button" bindtap="doneEdit()">完成</view>
                    </view>
                </block>
            </view>
        </view>

    </view>
</template>

<script>
    import wepy from 'wepy';
    import categoryApi from '../apis/categoryApi';
    import utils from '../lib/utils';

    let y, y1, y2;

    // 列表元素高度
    let itemHeight = utils.rem2px(120);

    export default class Category extends wepy.page {

        config = {
            navigationBarTitleText: '分组列表'
        };

        data = {
            list: [],
            iconUrl: '',

            isEditing: false,   // 编辑状态
            hasChanged: false,  // 有改变

            startIndex: -1, // 原始位置
            toIndex: -1, // 目标位置
            dragTop: -1, // 拖动元素的top

            // 动画
            itemDragInAni: '',
            itemDragOutAni: '',
            itemCountInAni: '',
            itemCountOutAni: '',
        };

        methods = {
            startEdit() {
                this.isEditing = true;
                this.listCopy = this.list.slice(0);
            },
            doneEdit() {
                if (this.hasChanged) {
                    let data = this.list.map((item, i) => ({
                        id: item.id,
                        name: item.name,
                        icon: item.icon
                    }));

                    utils.showLoading();
                    categoryApi.saveAll(data).then(result => {
                        utils.hideLoading();
                        if (utils.isSuccess(result)) {
                            utils.showToast('保存成功', 'success');
                            this.isEditing = false;
                            this.hasChanged = false;
                            this.$apply();
                        } else {
                            utils.showToast('保存失败');
                        }
                    });
                } else {
                    this.isEditing = false;
                    this.hasChanged = false;
                }
            },
            cancelEdit() {
                this.list = this.listCopy;
                this.isEditing = false;
                this.hasChanged = false;
            },
            itemTap(item) {
                if (this.isEditing) return;
                utils.navigateTo(`account?categoryId=${item.id}&categoryName=${item.name}`);
            },
            nameInput(index, e) {
                this.list[index].name = e.detail.value;
                this.hasChanged = true;
            },
            moveStart: function (index, e) {
                if (!this.isEditing) return;

                y = e.touches[0].clientY;
                y1 = e.currentTarget.offsetTop;
                y2 = e.touches[0].clientY - y + y1;

                this.startIndex = index;
                this.toIndex = index;
                this.dragTop = y2;

            },
            move: function (e) {
                if (!this.isEditing) return;

                y2 = e.touches[0].clientY - y + y1;

                var toIndex = 0;
                for (var i = 1; i < this.list.length; i++) {
                    if (y2 > (itemHeight * (i - 1) + itemHeight / 2)) {
                        toIndex = i;
                    }
                }

                this.dragTop = y2;
                this.toIndex = toIndex;
            },
            moveEnd: function (e) {
                if (!this.isEditing) return;

                let item = this.list[this.startIndex];
                this.list.splice(this.startIndex, 1);
                this.list.splice(this.toIndex, 0, item);

                this.startIndex = -1;
                this.toIndex = -1;
                this.dragTop = -1;

                this.hasChanged = true;
            },
            selectIcon(index, e) {
                if (!this.isEditing) return;

                this.editIndex = index;
                wx.navigateTo({
                    url: 'select-icon'
                });
            },
            selectIcon_callback(icon) {
                this.list[this.editIndex].icon = icon;
                this.hasChanged = true;
            }
        };

        async onLoad() {
            utils.showLoading();
            const result = await categoryApi.list();
            utils.hideLoading();

            this.list = result.data;
            this.iconUrl = result.iconUrl;
            this.$apply();
        }

        onReady() {
            // 创建动画
            var itemDragInAni = wx.createAnimation({timingFunction: 'ease', delay: 400});
            itemDragInAni.width('60rpx').step();
            this.itemDragInAni = itemDragInAni.export();

            var itemDragOutAni = wx.createAnimation({timingFunction: 'ease'});
            itemDragOutAni.width('0rpx').step();
            this.itemDragOutAni = itemDragOutAni.export();

            var itemCountInAni = wx.createAnimation({timingFunction: 'ease', delay: 400});
            itemCountInAni.width('60rpx').step();
            this.itemCountInAni = itemCountInAni.export();

            var itemCountOutAni = wx.createAnimation({timingFunction: 'ease'});
            itemCountOutAni.width('0rpx').step();
            this.itemCountOutAni = itemCountOutAni.export();
        }
    }
</script>

<style type="less">
    @import '../style/weui.less';

    .category-item {
        @leftGap: ~'30rpx';
        position: relative;
        display: flex;
        height: ~'120rpx';
        padding-left: @leftGap;

        &:before {
            .setBottomLine(@weuiLineColorLight);
            left: @leftGap;
        }

        .item-icon {
            display: flex;
            justify-content: center;
            align-items: center;

            .icon {
                width: ~'90rpx';
                height: ~'90rpx';
                background-color: @weuiBgColorDefault;
                border-radius: 50%;
                display: flex;
                justify-content: center;
                align-items: center;

                image {
                    width: 100%;
                    height: 100%;
                }
            }

        }

        .item-title {
            display: flex;
            justify-content: space-between;
            flex-grow: 1;
            padding-left: ~'30rpx';
            padding-right: ~'40rpx';
            box-sizing: border-box;

            text {
                display: flex;
                align-items: center;
                padding-right: ~'20rpx';
                font-size: @weuiFontSize;
                color: @weuiTextColorTitle;
                box-sizing: border-box;
                margin-top: -1px;
            }

            input {
                width: 100%;
                height: 100%;
                font-size: @weuiFontSize;
                border: 0;
                padding: 0;
                margin: 0;
                box-sizing: border-box;
            }

        }

        .item-count {
            display: flex;
            justify-content: flex-start;
            align-items: center;
            flex-shrink: 0;
            width: ~'60rpx';
            overflow: hidden;

            .count {
                display: flex;
                justify-content: center;
                align-items: center;
                font-size: @weuiFontSize;
                color: @weuiTextColorWarn;
                width: ~'30rpx';
            }
        }

        .item-drag {
            display: flex;
            align-items: center;
            flex-shrink: 0;
            width: ~'0rpx';
            overflow: hidden;

            icon {
                font-size: @weuiFontSizeXL;
            }
        }
    }

    .mainmove {
        display: flex;
        height: ~'120rpx';
        position: absolute;
        width: 100%;
        z-index: 10;
        opacity: 0.6;
        box-shadow: 0px 0px 20px #333333;

    }

    .mainend {
        display: flex;
        height: ~'120rpx';
        position: inherit;
        opacity: 1;
    }


</style>
